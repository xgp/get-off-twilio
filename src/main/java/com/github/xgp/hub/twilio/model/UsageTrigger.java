/*
 * Twilio
 * Enabling phones, VoIP, and messaging to be embedded into web, desktop, and mobile software.
 *
 * OpenAPI spec version: 2010-04-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.github.xgp.hub.twilio.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;
import javax.validation.constraints.*;

/** UsageTrigger */
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaJerseyDIServerCodegen",
    date = "2020-05-22T20:43:20.517+02:00[Europe/Paris]")
public class UsageTrigger {
  @JsonProperty("account_sid")
  private String accountSid = null;

  /** The HTTP method Twilio will use when making a request to the CallbackUrl. GET or POST. */
  public enum CallbackMethodEnum {
    GET("GET"),

    POST("POST");

    private String value;

    CallbackMethodEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CallbackMethodEnum fromValue(String text) {
      for (CallbackMethodEnum b : CallbackMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("callback_method")
  private CallbackMethodEnum callbackMethod = null;

  @JsonProperty("callback_url")
  private String callbackUrl = null;

  @JsonProperty("current_value")
  private String currentValue = null;

  @JsonProperty("date_created")
  private String dateCreated = null;

  @JsonProperty("date_fired")
  private String dateFired = null;

  @JsonProperty("date_updated")
  private String dateUpdated = null;

  @JsonProperty("friendly_name")
  private String friendlyName = null;

  @JsonProperty("recurring")
  private String recurring = null;

  @JsonProperty("sid")
  private String sid = null;

  /** The field in the UsageRecord that fires the trigger. One of count, usage, or price. */
  public enum TriggerByEnum {
    COUNT("count"),

    USAGE("usage"),

    PRICE("price");

    private String value;

    TriggerByEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TriggerByEnum fromValue(String text) {
      for (TriggerByEnum b : TriggerByEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("trigger_by")
  private TriggerByEnum triggerBy = null;

  @JsonProperty("trigger_value")
  private String triggerValue = null;

  @JsonProperty("uri")
  private String uri = null;

  @JsonProperty("usage_category")
  private String usageCategory = null;

  @JsonProperty("usage_record_uri")
  private String usageRecordUri = null;

  public UsageTrigger accountSid(String accountSid) {
    this.accountSid = accountSid;
    return this;
  }

  /**
   * The account this trigger monitors.
   *
   * @return accountSid
   */
  @JsonProperty("account_sid")
  @Schema(description = "The account this trigger monitors.")
  public String getAccountSid() {
    return accountSid;
  }

  public void setAccountSid(String accountSid) {
    this.accountSid = accountSid;
  }

  public UsageTrigger callbackMethod(CallbackMethodEnum callbackMethod) {
    this.callbackMethod = callbackMethod;
    return this;
  }

  /**
   * The HTTP method Twilio will use when making a request to the CallbackUrl. GET or POST.
   *
   * @return callbackMethod
   */
  @JsonProperty("callback_method")
  @Schema(
      description =
          "The HTTP method Twilio will use when making a request to the CallbackUrl. GET or POST.")
  public CallbackMethodEnum getCallbackMethod() {
    return callbackMethod;
  }

  public void setCallbackMethod(CallbackMethodEnum callbackMethod) {
    this.callbackMethod = callbackMethod;
  }

  public UsageTrigger callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Twilio will make a request to this url when the trigger fires.
   *
   * @return callbackUrl
   */
  @JsonProperty("callback_url")
  @Schema(description = "Twilio will make a request to this url when the trigger fires.")
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }

  public UsageTrigger currentValue(String currentValue) {
    this.currentValue = currentValue;
    return this;
  }

  /**
   * The current value of the field the trigger is watching.
   *
   * @return currentValue
   */
  @JsonProperty("current_value")
  @Schema(description = "The current value of the field the trigger is watching.")
  public String getCurrentValue() {
    return currentValue;
  }

  public void setCurrentValue(String currentValue) {
    this.currentValue = currentValue;
  }

  public UsageTrigger dateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date the trigger was created, given as GMT RFC 2822 format.
   *
   * @return dateCreated
   */
  @JsonProperty("date_created")
  @Schema(description = "The date the trigger was created, given as GMT RFC 2822 format.")
  public String getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
  }

  public UsageTrigger dateFired(String dateFired) {
    this.dateFired = dateFired;
    return this;
  }

  /**
   * The date the trigger was last fired, given as GMT RFC 2822 format.
   *
   * @return dateFired
   */
  @JsonProperty("date_fired")
  @Schema(description = "The date the trigger was last fired, given as GMT RFC 2822 format.")
  public String getDateFired() {
    return dateFired;
  }

  public void setDateFired(String dateFired) {
    this.dateFired = dateFired;
  }

  public UsageTrigger dateUpdated(String dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * The date the trigger was last updated, given as GMT RFC 2822 format.
   *
   * @return dateUpdated
   */
  @JsonProperty("date_updated")
  @Schema(description = "The date the trigger was last updated, given as GMT RFC 2822 format.")
  public String getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(String dateUpdated) {
    this.dateUpdated = dateUpdated;
  }

  public UsageTrigger friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * A user-specified, human-readable name for the trigger.
   *
   * @return friendlyName
   */
  @JsonProperty("friendly_name")
  @Schema(description = "A user-specified, human-readable name for the trigger.")
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }

  public UsageTrigger recurring(String recurring) {
    this.recurring = recurring;
    return this;
  }

  /**
   * How this trigger recurs. Empty for non-recurring triggers. One of daily, monthly, or yearly for
   * recurring triggers. A trigger will only fire once during each recurring period. Recurring
   * periods are in GMT.
   *
   * @return recurring
   */
  @JsonProperty("recurring")
  @Schema(
      description =
          "How this trigger recurs. Empty for non-recurring triggers. One of daily, monthly, or yearly for recurring triggers. A trigger will only fire once during each recurring period. Recurring periods are in GMT.")
  public String getRecurring() {
    return recurring;
  }

  public void setRecurring(String recurring) {
    this.recurring = recurring;
  }

  public UsageTrigger sid(String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * The trigger&#x27;s unique Sid.
   *
   * @return sid
   */
  @JsonProperty("sid")
  @Schema(description = "The trigger's unique Sid.")
  public String getSid() {
    return sid;
  }

  public void setSid(String sid) {
    this.sid = sid;
  }

  public UsageTrigger triggerBy(TriggerByEnum triggerBy) {
    this.triggerBy = triggerBy;
    return this;
  }

  /**
   * The field in the UsageRecord that fires the trigger. One of count, usage, or price.
   *
   * @return triggerBy
   */
  @JsonProperty("trigger_by")
  @Schema(
      description =
          "The field in the UsageRecord that fires the trigger. One of count, usage, or price.")
  public TriggerByEnum getTriggerBy() {
    return triggerBy;
  }

  public void setTriggerBy(TriggerByEnum triggerBy) {
    this.triggerBy = triggerBy;
  }

  public UsageTrigger triggerValue(String triggerValue) {
    this.triggerValue = triggerValue;
    return this;
  }

  /**
   * The value at which the trigger will fire. Must be a positive numeric value.
   *
   * @return triggerValue
   */
  @JsonProperty("trigger_value")
  @Schema(
      description = "The value at which the trigger will fire. Must be a positive numeric value.")
  public String getTriggerValue() {
    return triggerValue;
  }

  public void setTriggerValue(String triggerValue) {
    this.triggerValue = triggerValue;
  }

  public UsageTrigger uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI for this resource, relative to https://api.twilio.com.
   *
   * @return uri
   */
  @JsonProperty("uri")
  @Schema(description = "The URI for this resource, relative to https://api.twilio.com.")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public UsageTrigger usageCategory(String usageCategory) {
    this.usageCategory = usageCategory;
    return this;
  }

  /**
   * The usage category the trigger watches. One of the supported usage categories.
   *
   * @return usageCategory
   */
  @JsonProperty("usage_category")
  @Schema(
      description =
          "The usage category the trigger watches. One of the supported usage categories.")
  public String getUsageCategory() {
    return usageCategory;
  }

  public void setUsageCategory(String usageCategory) {
    this.usageCategory = usageCategory;
  }

  public UsageTrigger usageRecordUri(String usageRecordUri) {
    this.usageRecordUri = usageRecordUri;
    return this;
  }

  /**
   * The URI of the UsageRecord this trigger is watching, relative to https://api.twilio.com.
   *
   * @return usageRecordUri
   */
  @JsonProperty("usage_record_uri")
  @Schema(
      description =
          "The URI of the UsageRecord this trigger is watching, relative to https://api.twilio.com.")
  public String getUsageRecordUri() {
    return usageRecordUri;
  }

  public void setUsageRecordUri(String usageRecordUri) {
    this.usageRecordUri = usageRecordUri;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageTrigger usageTrigger = (UsageTrigger) o;
    return Objects.equals(this.accountSid, usageTrigger.accountSid)
        && Objects.equals(this.callbackMethod, usageTrigger.callbackMethod)
        && Objects.equals(this.callbackUrl, usageTrigger.callbackUrl)
        && Objects.equals(this.currentValue, usageTrigger.currentValue)
        && Objects.equals(this.dateCreated, usageTrigger.dateCreated)
        && Objects.equals(this.dateFired, usageTrigger.dateFired)
        && Objects.equals(this.dateUpdated, usageTrigger.dateUpdated)
        && Objects.equals(this.friendlyName, usageTrigger.friendlyName)
        && Objects.equals(this.recurring, usageTrigger.recurring)
        && Objects.equals(this.sid, usageTrigger.sid)
        && Objects.equals(this.triggerBy, usageTrigger.triggerBy)
        && Objects.equals(this.triggerValue, usageTrigger.triggerValue)
        && Objects.equals(this.uri, usageTrigger.uri)
        && Objects.equals(this.usageCategory, usageTrigger.usageCategory)
        && Objects.equals(this.usageRecordUri, usageTrigger.usageRecordUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        accountSid,
        callbackMethod,
        callbackUrl,
        currentValue,
        dateCreated,
        dateFired,
        dateUpdated,
        friendlyName,
        recurring,
        sid,
        triggerBy,
        triggerValue,
        uri,
        usageCategory,
        usageRecordUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageTrigger {\n");

    sb.append("    accountSid: ").append(toIndentedString(accountSid)).append("\n");
    sb.append("    callbackMethod: ").append(toIndentedString(callbackMethod)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    currentValue: ").append(toIndentedString(currentValue)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateFired: ").append(toIndentedString(dateFired)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    triggerBy: ").append(toIndentedString(triggerBy)).append("\n");
    sb.append("    triggerValue: ").append(toIndentedString(triggerValue)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    usageCategory: ").append(toIndentedString(usageCategory)).append("\n");
    sb.append("    usageRecordUri: ").append(toIndentedString(usageRecordUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
